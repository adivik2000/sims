module Cucumber
module TreetopParser

grammar Feature
  rule root
    header scenario_sequence space? {
      def compile
        feature = Tree::Feature.new(header.text_value.strip)
        scenario_sequence.compile(feature)
        feature
      end
    }
  end
  
  rule header
    (!scenario_keyword .)+
  end
  
  rule scenario_sequence
    head:scenario? tail:(space scenario_or_table)* {
      def compile(feature)
        ([head] + tail).each do |scenario_or_table|
          scenario_or_table.compile(feature) if scenario_or_table.respond_to?(:compile)
        end
      end
      
      def tail
        super.elements.map { |elt| elt.scenario_or_table }
      end
    }
  end

  rule scenario
    scenario_keyword space name:line_to_eol steps:(space step_sequence)? {
      def compile(feature)
        scenario = feature.add_scenario(name.text_value.strip)
        steps.step_sequence.compile(scenario) if steps.respond_to?(:step_sequence)
        # TODO - GET RID OF THIS last_scenario NASTINESS
        # Use a better datastructure, like a linked list...
        Feature.last_scenario = scenario
      end
    }
  end
  
  rule scenario_or_table
    scenario / table
  end
  
  rule table
    head:table_line body:(blank* eol space? table_line)* {
      def compile(feature)
        Feature.last_scenario.table_header = head.cell_values
        body.each do |table_line|
          feature.add_row_scenario(Feature.last_scenario, table_line.cell_values, table_line.line)
        end
      end

      def body
        super.elements.map { |elt| elt.table_line }
      end
    }
  end
  
  rule table_line
    separator cells:(blank* cell_value blank* separator)+ {
      def cell_values
        cells.elements.map { |elt| elt.cell_value.text_value.strip }
      end

      def line
        input.line_of(interval.first)
      end
    }
  end

  rule cell_value
    (!(separator / eol) .)*
  end

  rule step_sequence
    head:step tail:(space step)* {
      def compile(scenario)
        ([head] + tail).each do |step|
          step.compile(scenario)
        end
      end
      
      def tail
        super.elements.map { |elt| elt.step }
      end
    }
  end

  rule step
    given_scenario / plain_step
  end
  
  rule given_scenario
    given_scenario_keyword space name:line_to_eol {
      def compile(scenario)
        line = input.line_of(interval.first)
        scenario.add_given_scenario(name.text_value.strip, line)
      end
    }
  end

  rule plain_step
    step_keyword space name:line_to_eol {
      def compile(scenario)
        line = input.line_of(interval.first)
        scenario.add_step(step_keyword.text_value, name.text_value.strip, line)
      end
    }
  end

  rule separator
    '|'
  end

  rule space
    (white / comment_to_eol)+
  end

  rule line_to_eol
    (!eol .)*
  end

  rule comment_to_eol
    '#' line_to_eol
  end

  rule white
    blank / eol
  end
  
  rule blank
    [ \t]
  end
  
  rule eol
    "\r\n?" / "\n"
  end

  rule step_keyword
    '<%= words['given'] %>' / '<%= words['when'] %>' / '<%= words['then'] %>' / '<%= words['and'] %>'
  end
  
  rule scenario_keyword
    '<%= words['scenario'] %>:'
  end
  
  rule given_scenario_keyword
    '<%= words['given_scenario'] %>' ':'?
  end

end

end
end